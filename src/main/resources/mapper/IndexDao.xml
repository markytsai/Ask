<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 设置为IndexDao接口方法提供sql语句配置 -->
<mapper namespace="com.ilsxh.dao.IndexDao">

    <select id="selectProfileInfoByUserId" resultType="com.ilsxh.entity.User" parameterType="String">

        select user_id as userId,username,avatar_url as avatarUrl,gender,simple_desc as simpleDesc,position,industry,career,education,full_desc,
        liked_count,collected_count,follow_count,followed_count,scanned_count
    	from user where user_id = #{userId}
    </select>

    <update id="updateProfile" parameterType="com.ilsxh.entity.User">
        update user
        set username=#{username},
        simple_desc=#{simpleDesc},
        position=#{position},
        industry=#{industry},
        career=#{career},
        education=#{education},
        full_desc=#{fullDesc}
        where user_id=#{userId}
    </update>

    <select id="selectUserCountByUserIdAndPassword" resultType="Integer">
        select count(1) from user
        where user_id = #{userId} and password = #{password}
    </select>

    <update id="updatePassword">
        update user set password = #{newpassword}
        where user_id = #{userId}
    </update>

    <update id="updateAvatarUrl">
        update user set avatar_url = #{avatarUrl}
        where user_id= #{userId}
    </update>


    <select id="getFollowedQuestion" resultType="Activity">
        SELECT
            q.question_id "answer.question.questionId",
            q.question_title "answer.question.questionTitle",
            q.question_content "answer.question.questionContent",
            q.followed_count "answer.question.followedCount",
            q.scanned_count "answer.question.ScannedCount",
            q.create_time "answer.question.createTime",
            q.user_id "answer.question.userId",
            q.answer_count "answer.question.answerCount",

            u.username "answer.user.username",
            u.avatar_url "answer.user.avatarUrl",
            u.simple_desc "answer.user.simpleDesc",
            u.position "answer.user.position",

            q.create_time "createTime"

        FROM
            question AS q
            INNER JOIN mid_user_follow_question AS qum ON qum.question_id = q.question_id
            inner join user as u on q.user_id = u.user_id
        WHERE
            qum.user_id = #{userId}
    </select>

    <select id="getVotedAnswer" resultType="Activity">
        SELECT
            q.question_id "answer.question.questionId",
            q.question_title "answer.question.questionTitle",
            q.question_content "answer.question.questionContent",
            q.followed_count "answer.question.followedCount",
            q.scanned_count "answer.question.ScannedCount",
            q.create_time "answer.question.createTime",
            q.user_id "answer.question.userId",
            q.answer_count "answer.question.answerCount",

            a.answer_id "answer.answerId",
            a.answer_content "answer.answerContent",
            a.liked_count "answer.likedCount",
            a.disliked_count "answer.dislikedCount",
            a.create_time "answer.createTime",
            a.answer_user_id "answer.answerUserId",

            u.username "answer.user.username",
            u.avatar_url "answer.user.avatarUrl",
            u.simple_desc "answer.user.simpleDesc",
            u.position "answer.user.position",

            uva.create_time "createTime"

            from answer as a inner join mid_user_vote_answer as uva on a.answer_id = uva.answer_id
            inner join question as q on q.question_id = a.question_id
            inner join user as u on uva.user_id = u.user_id
            where uva.vote = 1 and uva.user_id = #{userId}
    </select>

    <select id="getRaisedQuestion" resultType="Activity">
        SELECT
            q.question_id "answer.question.questionId",
            q.question_title "answer.question.questionTitle",
            q.question_content "answer.question.questionContent",
            q.followed_count "answer.question.followedCount",
            q.scanned_count "answer.question.ScannedCount",
            q.create_time "answer.question.createTime",
            q.user_id "answer.question.userId",
            q.answer_count "answer.question.answerCount",

            u.username "answer.user.username",
            u.avatar_url "answer.user.avatarUrl",
            u.simple_desc "answer.user.simpleDesc",
            u.position "answer.user.position",

            q.create_time "createTime"
        from question as q
        inner join user as u on u.user_id = q.user_id
        where q.user_id = #{userId}

    </select>

    <select id="getAnswer" resultType="Activity">
        SELECT
            q.question_id "answer.question.questionId",
            q.question_title "answer.question.questionTitle",
            q.question_content "answer.question.questionContent",
            q.followed_count "answer.question.followedCount",
            q.scanned_count "answer.question.ScannedCount",
            q.create_time "answer.question.createTime",
            q.user_id "answer.question.userId",
            q.answer_count "answer.question.answerCount",

            a.answer_id "answer.answerId",
            a.answer_content "answer.answerContent",
            a.liked_count "answer.likedCount",
            a.disliked_count "answer.dislikedCount",
            a.create_time "answer.createTime",
            a.answer_user_id "answer.answerUserId",

            u.username "answer.user.username",
            u.avatar_url "answer.user.avatarUrl",
            u.simple_desc "answer.user.simpleDesc",
            u.position "answer.user.position",

            a.create_time "createTime"
        from answer as a
        inner join question as q on q.question_id = a.question_id
        inner join user as u on a.answer_user_id = u.user_id
        where a.answer_user_id = #{userId}
    </select>

    <select id="getCollectionAnswer" resultType="Activity">
        select
            a.answer_id "answer.answerId",
            a.answer_content "answer.answerContent",
            a.liked_count "answer.likedCount",
            a.disliked_count "answer.dislikedCount",
            a.create_time "answer.createTime",
            a.answer_user_id "answer.userId",
            a.question_id "answer.question.questionId",


            muca.create_time "createTime"

          from answer as a
          inner join mid_user_collect_answer as muca on muca.answer_id = a.answer_id
          where muca.user_id = #{userId}
    </select>

    <select id="getFollowingUser" resultType="Activity">
        SELECT
            fu.user_id "answer.user.userId",
            fu.email "answer.user.email",
            fu.password "answer.user.password",
            fu.join_time "answer.user.joinTime",
            fu.username "answer.user.username",
            fu.avatar_url "answer.user.avatarUrl",
            fu.gender "answer.user.gender",
            fu.simple_desc "answer.user.simpleDesc",
            fu.residence_place "answer.user.residencePlace",
            fu.position "answer.user.postion",
            fu.industry "answer.user.industry",
            fu.career "answer.user.career",
            fu.education "answer.user.education",
            fu.full_desc "answer.user.fullDesc",
            fu.liked_count "answer.user.likedCount",
            fu.collected_count "answer.user.collectedCount",
            fu.follow_count "answer.user.followCount",
            fu.followed_count "answer.user.followedCount",
            fu.scanned_count "answer.user.scanedCount",
            mufu.follow_status "answer.user.followStatus",

            mufu.create_time "createTime"

        FROM
            mid_user_follow_user AS mufu
            inner join user as fu on mufu.user_followed_id = fu.user_id
            INNER JOIN user AS u ON u.user_id = mufu.user_id
        WHERE u.user_id = #{userId} and mufu.follow_status = 1;
    </select>

</mapper>

