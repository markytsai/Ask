<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 设置为AnswerDao接口方法提供sql语句配置 -->
<mapper namespace="com.ilsxh.dao.TopicDao">

    <resultMap id="topicMap" type="com.ilsxh.entity.Topic">
        <id column="topic_id" property="topicId"/>
        <result column="topic_name" property="topicName"/>
        <result column="topic_simple_desc" property="topicSimpleDesc"/>
        <result column="topic_image" property="topicImage"/>
        <result column="parent_topic_id" property="parentTopicId"/>
        <result column="followed_count" property="followedCount"/>
        <result column="topic_followed" property="topicFollowd"/>
    </resultMap>

    <select id="getTopicByTopicId" resultType="Topic">

        SELECT topic_id, topic_name, topic_simple_desc, topic_full_desc, topic_full_desc_en, topic_image, followed_count
        from topic
        where topic_id = #{topicId}
    </select>

    <select id="getQuestionWithThisTopic" resultType="Question">
        SELECT
            q.question_id,
            q.question_title,
            q.question_content,
            q.followed_count,
            q.scanned_count,
            q.create_time,
            q.user_id,
            q.answer_count,
            u.username "user.username"
        from question as q
        inner join mid_question_topic as mqt on q.question_id = mqt.question_id
        inner join user as u on q.user_id = u.user_id
        where mqt.topic_id = #{topicId}
    </select>

    <select id="getAnswersByTopicId" resultType="Answer">

        select
            a.answer_id,
            a.answer_content,
            a.liked_count,
            a.disliked_count,
            a.create_time,
            a.answer_user_id,
            a.question_id,

            q.question_id "question.questionId",
            q.question_title "question.questionTitle",
            q.question_content "question.questionContent",
            q.followed_count "question.questionCount",
            q.scanned_count "question.scannedCount",
            q.create_time "question.createTime",
            q.user_id "question.userId",
            q.answer_count "question.answerCount"

            from answer as a
            inner join question as q on a.question_id = q.question_id
            inner join mid_question_topic as mqt on q.question_id = mqt.question_id
            inner join topic as t on mqt.topic_id = t.topic_id
            where t.topic_id = #{topicId}
    </select>

    <select id="getollowingUserByUserId" resultType="User">
        select
            u.user_id,
            u.email,
            u.password,
            u.join_time,
            u.username,
            u.avatar_url,
            u.gender,
            u.simple_desc,
            u.residence_place,
            u.position,
            u.industry,
            u.career,
            u.education,
            u.full_desc,
            u.liked_count,
            u.collected_count,
            u.follow_count,
            u.followed_count,
            u.scanned_count

            from user as u
            inner join answer as a on u.user_id = a.answer_user_id
            inner join question as q on a.question_id = q.question_id
            inner join mid_question_topic as mqt on q.question_id = mqt.question_id
            inner join topic as t on mqt.topic_id = t.topic_id
            where t.topic_id = #{topicId}
        </select>

    <select id="getTopicIdByTopicName" resultType="Integer">
        select topic_id
        from topic
        where topic_name = #{topicName}
    </select>

    <select id="getProbablyRelativeTopics" resultType="Topic">
        select topic_id, topic_name
        from topic
        where topic_name like CONCAT(CONCAT('%',#{partialWord}),'%')
    </select>

    <select id="getCurrStat" resultType="Integer">
        SELECT follow_topic_status from mid_user_follow_topic
        where user_id = #{localUserId} and topic_id = #{topicId}
    </select>

    <insert id="insertfollowTopic">
        insert into mid_user_follow_topic(user_id, topic_id, follow_topic_status)
        values(#{localUserId}, #{topicId}, 1)
    </insert>

    <insert id="initUserFollowTopics" parameterType="java.util.List">
        insert into mid_user_follow_topic(user_id, topic_id, follow_topic_status)
        values
        <foreach collection="topicIds" item="item" index="index" separator=",">
            (
            #{userId}, #{item.topicId}, 0
            )
        </foreach>
    </insert>

    <update id="updateUserFollowTopics">
        update mid_user_follow_topic set follow_topic_status = 1
        where topic_id in
        <foreach collection="topicIds" item="item" index="index" open="(" close=")" separator=",">
        #{item}
        </foreach>
        and user_id = #{userId}
    </update>

    <update id="updateFollowTopic">
        update mid_user_follow_topic set follow_topic_status = #{targetStatus}
        where user_id = #{localUserId} and topic_id = #{topicId}
    </update>

    <select id="getAllTopicsFromColdStart" resultMap="topicMap">
        select topic_id, topic_name, topic_simple_desc, topic_image, parent_topic_id, followed_count
        from topic_coldstart
    </select>

    <select id="getAllTopics" resultMap="topicMap">
        select topic_id, topic_name, topic_simple_desc, topic_image, parent_topic_id, followed_count
        from topic
    </select>

    <select id="getChilrenTopicByTopicId" resultMap="topicMap">
        select tc.topic_id, tc.topic_name, muft.follow_topic_status as topic_followed from topic_coldstart as tc
        left join mid_user_follow_topic as muft on muft.topic_id= tc.topic_id
        where tc.parent_topic_id = #{rootTopicId}
    </select>

    <select id="getThirdLevelChilrenTopic" resultMap="topicMap">
        select t.topic_id, t.topic_name, muft.follow_topic_status as topic_followed from topic as t
        LEFT join mid_user_follow_topic as muft on t.topic_id = muft.topic_id
        where t.parent_topic_id = #{topicId} and muft.user_id = #{userId} and muft.follow_topic_status = 1
    </select>

    <select id="getAllThirdTopics" resultMap="topicMap">
        select topic_id, topic_name, topic_followed from topic
        where parent_topic_id = #{topicId}
    </select>

    <select id="getFollowedThirdTopics" resultType="Integer">
        select t.topic_id from topic as t
        LEFT join mid_user_follow_topic as muft on t.topic_id = muft.topic_id
        where t.parent_topic_id = #{topicId} and muft.user_id = #{userId} and muft.follow_topic_status = 1
    </select>

    <update id="zeroAllTopicByUserId">
        update mid_user_follow_topic set follow_topic_status = 0
        where user_id = #{userId}
    </update>

    <select id="getFollowingTopicByUserId" resultMap="topicMap">
        select t.topic_id, t.topic_name, topic_image, followed_count, topic_followed from topic as t
        inner join mid_user_follow_topic as muft on t.topic_id = muft.topic_id
        where muft.user_id = #{userId} and muft.follow_topic_status = 1
    </select>

    <insert id="insertFollowTopicWhenFirstLogin" parameterType="java.util.List">
        insert into mid_user_follow_topic(user_id, topic_id, follow_topic_status)
        values
        <foreach collection="topicIds" item="item" index="index" separator=",">
            (
            #{userId}, #{item}, 1
            )
        </foreach>
    </insert>
    
    <delete id="deleteFollowTopicByUserId" parameterType="java.util.List">
        delete from mid_user_follow_topic
        where user_id = #{userId} 
        and 
        <foreach collection="topicIds" item="item" index="index" separator=",">
            topic_id = #{item}
        </foreach>
    </delete>
</mapper>
